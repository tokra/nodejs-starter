#!/usr/bin/env node
const config = require('config');
const _ = require('lodash');
const { HealthClient, DescribeAffectedAccountsForOrganizationCommand } = require('@aws-sdk/client-health');
const app = require('../app/app');
const logger = require('../lib/logger').getLogger('app');

const port = _.isEmpty(process.env.PORT) ? config.get('http.port') : process.env.PORT;

const onListening = (srvport = port) => {
	logger.info(`Server is listening on port ${srvport}`);
};

const onClose = () => {
	logger.info('Server has been stopped !');
};

const onError = (error) => {
	if (!_.isEqual(error.syscal, 'listen')) {
		throw error;
	}

	const bind = _.isString(port) ? `Pipe ${port}` : `Port ${port}`;

	switch (error.code) {
		case 'EACCES':
			logger.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break; // no-fallthrough
		case 'EADDRINUSE':
			logger.error(`${bind} is already in use`);
			process.exit(1);
			break; // no-fallthrough
		default:
			throw error;
	}
};

/* eslint-disable func-names */
(async function () {
	app.set('port', port);
	const server = app.listen(port, onListening(port));
	server.on('close', onClose);
	server.on('error', onError);
	try {
		// a client can be shared by different commands.
		const client = new HealthClient({ region: 'eu-central-1' });
		const params = {
			/** input parameters */
		};
		const command = new DescribeAffectedAccountsForOrganizationCommand(params);
		await client.send(command);
	} catch (error) {
		const { requestId, cfId, extendedRequestId } = error.$metadata;
		logger.error({ requestId, cfId, extendedRequestId });
		/**
		 * The keys within exceptions are also parsed.
		 * You can access them by specifying exception names:
		 * if (error.name === 'SomeServiceException') {
		 *     const value = error.specialKeyInException;
		 * }
		 */
	}
})();
